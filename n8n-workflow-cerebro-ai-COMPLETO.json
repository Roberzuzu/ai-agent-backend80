{
  "name": "üß† Control AI desde Telegram - Cerebro AI",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "telegram-trigger-1",
      "name": "üì± Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "cerebro-ai-telegram"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message.text }}",
              "operation": "startsWith",
              "value2": "/"
            }
          ]
        }
      },
      "id": "if-command",
      "name": "üîÄ ¬øEs Comando?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extraer comando y argumentos\nconst text = $input.item.json.message.text;\nconst parts = text.split(' ');\nconst command = parts[0].toLowerCase();\nconst args = parts.slice(1);\nconst userId = $input.item.json.message.from.id;\nconst chatId = $input.item.json.message.chat.id;\n\nreturn {\n  command: command,\n  args: args,\n  original_text: text,\n  chat_id: chatId,\n  user_id: `telegram_${userId}`,\n  username: $input.item.json.message.from.username || 'unknown',\n  first_name: $input.item.json.message.from.first_name || 'Usuario'\n};"
      },
      "id": "parse-command",
      "name": "‚öôÔ∏è Parse Command",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 180]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/ayuda",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "ayuda"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/status",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "status"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/memoria",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "memoria"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "/procesar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "procesar"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "switch-command",
      "name": "üîÑ Route Command",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 180]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "=üß† *Cerebro AI - Control Total desde Telegram*\n\n*üéØ Comandos Directos:*\n‚Ä¢ `/ayuda` - Ver esta ayuda\n‚Ä¢ `/status` - Estado del sistema AI\n‚Ä¢ `/memoria` - Ver tu historial (√∫ltimas 5)\n‚Ä¢ `/procesar [ID]` - Procesar producto con AI\n\n*üí¨ Lenguaje Natural (escribe lo que necesites):*\n\nüì¶ *Productos:*\n‚Ä¢ \"Busca 10 herramientas el√©ctricas tendencia\"\n‚Ä¢ \"Procesa el producto 4146 con AI\"\n‚Ä¢ \"Actualiza el stock del producto 100 a 50\"\n‚Ä¢ \"Crea un cup√≥n del 20% para sierras\"\n\nüìä *An√°lisis:*\n‚Ä¢ \"Dame las estad√≠sticas del sitio\"\n‚Ä¢ \"Analiza las ventas del √∫ltimo mes\"\n‚Ä¢ \"Analiza la competencia de taladros\"\n\nüé® *Creatividad:*\n‚Ä¢ \"Genera 2 im√°genes de sierra circular\"\n‚Ä¢ \"Crea contenido para blog sobre herramientas\"\n\n*El Cerebro AI tiene 18 herramientas disponibles* üöÄ\n*Usa memoria persistente con RAG* üß†",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-help",
      "name": "üí¨ Send Help",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1120, 80]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://wpmoneyhub.preview.emergentagent.com/api/agent/status",
        "options": {}
      },
      "id": "get-status",
      "name": "üìä Get Agent Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "=üìä *Estado del Cerebro AI*\n\nü§ñ *Agente:* {{ $('üìä Get Agent Status').item.json.agente_activo ? '‚úÖ Activo' : '‚ùå Inactivo' }}\nüîß *Herramientas:* {{ $('üìä Get Agent Status').item.json.herramientas_disponibles }}\nüíæ *Conversaciones:* {{ $('üìä Get Agent Status').item.json.conversaciones_totales }}\nüß† *Memorias:* {{ $('üìä Get Agent Status').item.json.memorias_guardadas }}\n\n*‚ö° Caracter√≠sticas:*\n‚Ä¢ Memoria persistente: {{ $('üìä Get Agent Status').item.json.caracteristicas.memoria_persistente ? '‚úÖ' : '‚ùå' }}\n‚Ä¢ RAG habilitado: {{ $('üìä Get Agent Status').item.json.caracteristicas.rag_enabled ? '‚úÖ' : '‚ùå' }}\n‚Ä¢ B√∫squeda sem√°ntica: {{ $('üìä Get Agent Status').item.json.caracteristicas.busqueda_semantica ? '‚úÖ' : '‚ùå' }}\n‚Ä¢ Embeddings OpenAI: {{ $('üìä Get Agent Status').item.json.caracteristicas.embeddings ? '‚úÖ' : '‚ùå' }}\n\n_Modelo: Perplexity Pro (sonar-pro)_",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-status",
      "name": "üì§ Send Status",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://wpmoneyhub.preview.emergentagent.com/api/agent/memory/{{ $json.user_id }}?limit=5",
        "options": {}
      },
      "id": "get-memory",
      "name": "üß† Get Memory",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 320]
    },
    {
      "parameters": {
        "jsCode": "const memories = $('üß† Get Memory').item.json.memories || [];\nconst chatId = $('‚öôÔ∏è Parse Command').item.json.chat_id;\nconst firstName = $('‚öôÔ∏è Parse Command').item.json.first_name;\n\nif (memories.length === 0) {\n  return {\n    chat_id: chatId,\n    text: `üìù Hola ${firstName}!\\n\\n*No tienes memorias guardadas a√∫n.*\\n\\nEmpieza a usar el Cerebro AI y tu historial se guardar√° autom√°ticamente con b√∫squeda sem√°ntica (RAG).\\n\\n_Prueba: \"Dame las estad√≠sticas del sitio\"_`\n  };\n}\n\nlet text = `üìù *Tus √∫ltimas ${memories.length} memorias*\\n\\n`;\n\nmemories.forEach((mem, idx) => {\n  const date = new Date(mem.timestamp);\n  const dateStr = date.toLocaleDateString('es-ES', {day: '2-digit', month: 'short'});\n  const timeStr = date.toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'});\n  \n  const cmdPreview = mem.command.length > 45 ? mem.command.substring(0, 45) + '...' : mem.command;\n  \n  text += `${idx + 1}. *${cmdPreview}*\\n`;\n  text += `   üìÖ ${dateStr} a las ${timeStr}\\n\\n`;\n});\n\ntext += \"\\n_El sistema usa RAG para recordar contexto relevante_\";\n\nreturn {\n  chat_id: chatId,\n  text: text\n};"
      },
      "id": "format-memory",
      "name": "‚ú® Format Memory",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 320]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-memory",
      "name": "üì§ Send Memory",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1560, 320]
    },
    {
      "parameters": {
        "jsCode": "// Preparar comando de procesamiento\nconst args = $json.args || [];\nconst chatId = $json.chat_id;\nconst userId = $json.user_id;\n\nif (args.length === 0) {\n  return {\n    error: true,\n    chat_id: chatId,\n    message: \"‚ùå *Formato incorrecto*\\n\\nUsa: `/procesar [ID]`\\n\\nEjemplo: `/procesar 4146`\"\n  };\n}\n\nconst productId = args[0];\n\nif (!/^\\d+$/.test(productId)) {\n  return {\n    error: true,\n    chat_id: chatId,\n    message: \"‚ùå *ID inv√°lido*\\n\\nEl ID debe ser un n√∫mero.\\n\\nEjemplo: `/procesar 4146`\"\n  };\n}\n\nreturn {\n  error: false,\n  chat_id: chatId,\n  user_id: userId,\n  command: `Procesa el producto ${productId} con AI: genera descripci√≥n SEO, calcula precio √≥ptimo, crea 2 im√°genes profesionales y actualiza todo en WooCommerce`,\n  product_id: productId\n};"
      },
      "id": "parse-procesar",
      "name": "üîß Parse Procesar",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 440]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.error }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-error",
      "name": "‚ö†Ô∏è Check Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 440]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-error",
      "name": "‚ùå Send Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1560, 380]
    },
    {
      "parameters": {
        "jsCode": "// Lenguaje natural\nconst text = $input.item.json.message.text;\nconst userId = $input.item.json.message.from.id;\nconst chatId = $input.item.json.message.chat.id;\nconst firstName = $input.item.json.message.from.first_name || 'Usuario';\n\nreturn {\n  command: text,\n  user_id: `telegram_${userId}`,\n  chat_id: chatId,\n  first_name: firstName,\n  original_message: $input.item.json.message\n};"
      },
      "id": "parse-natural",
      "name": "üí¨ Parse Natural Language",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 420]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "=üß† *Analizando tu solicitud...*\n\n\"{{ $json.command }}\"\n\n_Cerebro AI procesando con Perplexity Pro..._",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-processing",
      "name": "‚è≥ Send Processing",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [900, 420]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://wpmoneyhub.preview.emergentagent.com/api/agent/execute",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ command: $json.command, user_id: $json.user_id }) }}",
        "options": {
          "timeout": 180000
        }
      },
      "id": "execute-ai",
      "name": "ü§ñ Execute Cerebro AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 420]
    },
    {
      "parameters": {
        "jsCode": "const result = $input.item.json;\nconst chatId = $('üí¨ Parse Natural Language').item.json.chat_id;\nconst firstName = $('üí¨ Parse Natural Language').item.json.first_name;\n\nif (!result.success) {\n  return {\n    chat_id: chatId,\n    text: `‚ùå *Error ${firstName}*\\n\\n${result.error || 'Error desconocido procesando tu solicitud.'}\\n\\n_Intenta reformular el comando o usa /ayuda_`\n  };\n}\n\nlet text = `‚úÖ *${result.mensaje || 'Completado'}*\\n\\n`;\n\nif (result.plan) {\n  text += `üìã *Plan:* ${result.plan}\\n\\n`;\n}\n\nif (result.resultados && result.resultados.length > 0) {\n  text += `*üîß Resultados (${result.resultados.length}):*\\n\\n`;\n  \n  result.resultados.forEach((res, idx) => {\n    const herramienta = res.herramienta || 'Herramienta';\n    const resultado = res.resultado || {};\n    const success = resultado.success;\n    \n    if (success) {\n      text += `${idx + 1}. ‚úÖ *${herramienta}*\\n`;\n      \n      // Agregar detalles espec√≠ficos\n      if (resultado.productos) {\n        text += `   üì¶ Productos: ${resultado.productos.total || 0}\\n`;\n        if (resultado.productos.sin_stock) {\n          text += `   ‚ö†Ô∏è Sin stock: ${resultado.productos.sin_stock}\\n`;\n        }\n      }\n      \n      if (resultado.ventas) {\n        text += `   üí∞ √ìrdenes: ${resultado.ventas.total_ordenes || 0}\\n`;\n        text += `   üíµ Ingresos: ‚Ç¨${(resultado.ventas.ingresos_totales || 0).toFixed(2)}\\n`;\n      }\n      \n      if (resultado.mensaje) {\n        const msg = resultado.mensaje.length > 80 ? resultado.mensaje.substring(0, 80) + '...' : resultado.mensaje;\n        text += `   ‚ÑπÔ∏è ${msg}\\n`;\n      }\n      \n      if (resultado.total) {\n        text += `   üìä Total: ${resultado.total}\\n`;\n      }\n      \n      text += '\\n';\n    } else {\n      const error = (resultado.error || 'Error').substring(0, 60);\n      text += `${idx + 1}. ‚ùå *${herramienta}*\\n   ${error}\\n\\n`;\n    }\n  });\n}\n\nif (result.completado) {\n  text += '\\n‚ú® _Comando completado y guardado en memoria_';\n}\n\nreturn {\n  chat_id: chatId,\n  text: text\n};"
      },
      "id": "format-result",
      "name": "‚ú® Format Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 420]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-result",
      "name": "üì§ Send Result",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1560, 420]
    }
  ],
  "connections": {
    "üì± Telegram Trigger": {
      "main": [
        [
          {
            "node": "üîÄ ¬øEs Comando?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÄ ¬øEs Comando?": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Parse Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üí¨ Parse Natural Language",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Parse Command": {
      "main": [
        [
          {
            "node": "üîÑ Route Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Route Command": {
      "main": [
        [
          {
            "node": "üí¨ Send Help",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìä Get Agent Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üß† Get Memory",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üîß Parse Procesar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Get Agent Status": {
      "main": [
        [
          {
            "node": "üì§ Send Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Get Memory": {
      "main": [
        [
          {
            "node": "‚ú® Format Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ú® Format Memory": {
      "main": [
        [
          {
            "node": "üì§ Send Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Parse Procesar": {
      "main": [
        [
          {
            "node": "‚ö†Ô∏è Check Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ö†Ô∏è Check Error": {
      "main": [
        [
          {
            "node": "‚ùå Send Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ü§ñ Execute Cerebro AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üí¨ Parse Natural Language": {
      "main": [
        [
          {
            "node": "‚è≥ Send Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚è≥ Send Processing": {
      "main": [
        [
          {
            "node": "ü§ñ Execute Cerebro AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ Execute Cerebro AI": {
      "main": [
        [
          {
            "node": "‚ú® Format Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ú® Format Result": {
      "main": [
        [
          {
            "node": "üì§ Send Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-01-15T14:00:00.000Z",
  "versionId": "cerebro-ai-complete-v2"
}
